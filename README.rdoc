= Maildir

A Crystal library for reading and writing files in the "Maildir" file and directory structure.
Even though this format is mainly used for email messages, the Maildir structure and the implementation of this module are general - they do not require the file contents to be related to email.

== What's so great about the Maildir format

See http://cr.yp.to/proto/maildir.html and http://en.wikipedia.org/wiki/Maildir

"Two words: no locks." -- Daniel J. Bernstein

The maildir format allows multiple processes to read and write arbitrary messages without file locks.

New messages are initially written to a "tmp" directory with an automatically-generated unique filename. After the message is written, it's moved to the "new" directory where other processes may read it.

While the maildir format was created for email, it works well for arbitrary data. This library can read and write email messages or arbitrary data. See Pluggable serializers for more.

== Install

 dependencies:
   maildir:
     github: docelic/maildir.cr

== Usage

Create a maildir in /tmp/maildir_test

  require "maildir"
  maildir = Maildir.new("/tmp/maildir_test") # creates tmp, new, and cur dirs
  # To skip directory creation, call Maildir.new("/tmp/maildir_test", false)

Add a new message. This creates a new file with the contents "Hello, Crystal!"; returns the path fragment to the file. Messages are written to the tmp dir then moved to new.

  message = maildir.add("Hello, Crystal!")

List new messages

  maildir.list("new") # => [message]

Move the message from "new" to "cur" to indicate that some process has retrieved the message.

  message.process

Indeed, the message is in cur, not new.

  maildir.list("new") # => []
  maildir.list("cur") # => [message]

Add some flags to the message to indicate state. See "What can I put in info" at http://cr.yp.to/proto/maildir.html for flag conventions.

  message.add_flag("S") # Mark the message as "seen"
  message.add_flag("F") # Mark the message as "flagged"
  message.remove_flag("F") # unflag the message
  message.add_flag("T") # Mark the message as "trashed"

List "cur" messages based on flags.

  maildir.list("cur", :flags => '') # => lists all messages without any flags
  maildir.list("cur", :flags => 'F') # => lists all messages with flag 'F
  maildir.list("cur", :flags => 'FS') # => lists all messages with flag 'F' and 'S'
  maildir.list("cur", :flags => 'ST') # => lists all messages with flag 'S' and 'T'

 # Flags must be specified in acending ASCII order ('ST' and not 'TS').

Get a key to uniquely identify the message

  key = message.key

Load the contents of the message

  data = message.data

Find the message based using the key

  message_copy = maildir.get(key)
  message == message_copy # => true

Delete the message from disk

  message.destroy # => returns the frozen message
  maildir.list("cur") # => []

=== Cleaning up from orphaned messages

An expected (though rare) behavior is for partially-written messages to be
orphaned in the tmp folder (when clients fail before fully writing a message).

Find messages in tmp that haven't been changed in 36 hours:

  maildir.get_stale_tmp

Clean them up:

  maildir.get_stale_tmp.each{|msg| msg.destroy}

== Pluggable serializers

By default, message data are written and read from disk as a string. It's often desirable to process the string into a useful object. Maildir supports configurable serializers to convert message data into a useful object.

The following serializers are included:

* Maildir::Serializer::Base (default)
* Maildir::Serializer::JSON
* Maildir::Serializer::YAML

Maildir::Serializer::Base simply reads and writes strings to disk.

`Maildir.serializer` and `Maildir.serializer=` allow you to set default serializer.

  Maildir.serializer # => Maildir::Serializer::Base.new (default)
  message = maildir.add("Hello, Crystal!") # writes "Hello, Crystal!" to disk
  message.data # => "Hello, Crystal!"

You can also set the serializer per maildir:

  maildir = Maildir.new 'Maildir'
  maildir.serializer = Maildir::Serializer::JSON.new

The JSON and YAML serializers work similarly. E.g.:

  maildir.serializer = Maildir::Serializer::JSON.new
  my_data = {"foo" => nil, "my_array" => [1,2,3]}
  message = maildir.add(my_data) # writes {"foo":null,"my_array":[1,2,3]}
  message.data == my_data # => true

It's trivial to create a custom serializer. Implement the following two methods:

  load(path)
  dump(data, path)

== Author

* Davor Ocelic (github[http://github.com/docelic])

== History

This module was initially converted from Ruby's implementation on https://github.com/ktheory/maildir

== Copyright

Copyright (c) 2017 Davor Ocelic. See LICENSE for details.
